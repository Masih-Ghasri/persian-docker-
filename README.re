# داکر

## مقدمه

داکر در سال ۲۰۱۳ توسط سولومون، مؤسس شرکت dotCloud معرفی شد. این ابزار متن باز به توسعه‌دهندگان و تیم‌های DevOps اجازه می‌دهد که کد و تمام وابستگی‌های آن را در قالب بسته‌ای قابل حمل به نام کانتینر قرار دهند که روی هر میزبان با محیطی یکسان اجرا شود. داکر به سرعت به ابزاری انقلابی در شیوه ساخت، تحویل و اجرای نرم‌افزار تبدیل شد.

## چرا داکر مهم است؟

### حل مشکلات محیطی
یکی از مشکلات رایج توسعه‌دهندگان تفاوت محیط‌های کاری است. داکر با ایجاد محیطی یکسان این چالش را برطرف می‌کند.

### تسریع فرآیند CI/CD
داکر با ایجاد تصاویر قابل اطمینان و خودکارسازی فرآیندهای توسعه و استقرار، سرعت CI/CD را بهبود می‌بخشد.

### کاهش مصرف منابع
کانتینرها برخلاف ماشین‌های مجازی، بدون نیاز به اجرای کامل سیستم عامل هستند و سبک‌تر و سریع‌تر عمل می‌کنند.

## مزایای داکر

- **قابلیت حمل:** یک کانتینر می‌تواند بدون تغییر روی هر محیطی از لپ‌تاپ توسعه‌دهنده تا سرورهای ابری اجرا شود.
- **مدیریت وابستگی‌ها:** تمام فایل‌ها و وابستگی‌های برنامه در یک کانتینر قرار می‌گیرند.
- **افزایش سرعت توسعه:** تنظیم محیط‌های توسعه و تست به طور چشم‌گیری ساده‌تر می‌شود.
- **بهبود امنیت:** کانتینرها به صورت پیش‌فرض ایزوله از محیط میزبان هستند.

## تفاوت کانتینرها با ماشین‌های مجازی

کانتینرها تنها شامل برنامه و وابستگی‌های آن هستند و از سیستم عامل میزبان استفاده می‌کنند، در حالی که ماشین‌های مجازی یک سیستم عامل کامل را شبیه‌سازی می‌کنند.

## نحوه نصب داکر

### نصب روی لینوکس

1. بروزرسانی مخازن:
   ```bash
   sudo apt update
   ```

2. نصب داکر:
   ```bash
   sudo apt install docker.io
   ```

3. فعال‌سازی سرویس داکر:
   ```bash
   sudo systemctl enable --now docker
   ```

4. اضافه کردن کاربر به گروه داکر:
   ```bash
   sudo usermod -aG docker $USER
   ```

5. تایید نصب:
   ```bash
   docker --version
   docker run hello-world
   ```

### نصب روی macOS و ویندوز

1. دانلود Docker Desktop از سایت رسمی.
2. نصب و اجرای Docker Desktop با تنظیمات پیش‌فرض.
3. تست نصب با اجرای دستور:
   ```bash
   docker run hello-world
   ```

## مدیریت تصاویر داکر

### ساخت و اجرای تصاویر

1. ایجاد یک Dockerfile با محتوای زیر:
   ```dockerfile
   FROM python:3.9-slim
   RUN apt-get update && apt-get install -y nginx
   CMD ["nginx", "-g", "daemon off;"]
   ```

2. ساخت تصویر:
   ```bash
   docker build -t myapp:1.0 .
   ```

3. اجرای کانتینر از تصویر ساخته‌شده:
   ```bash
   docker run -d -p 80:8080 myapp:1.0
   ```

### بهینه‌سازی تصاویر

- استفاده از تصاویر پایه سبک مانند Alpine:
  ```dockerfile
  FROM alpine:3.16
  ```
- پاکسازی فایل‌های موقت:
  ```dockerfile
  RUN apt-get clean && rm -rf /var/lib/apt/lists/*
  ```

## مدیریت کانتینرها

### دستورات اصلی

- مشاهده کانتینرهای در حال اجرا:
  ```bash
  docker ps
  ```
- مشاهده تمام کانتینرها:
  ```bash
  docker ps -a
  ```
- توقف کانتینر:
  ```bash
  docker stop container_id
  ```
- حذف کانتینر:
  ```bash
  docker rm container_id
  ```

### مدیریت منابع کانتینرها

- محدود کردن استفاده از CPU:
  ```bash
  docker run --cpus="1.5" nginx
  ```
- محدود کردن حافظه:
  ```bash
  docker run --memory="512m" nginx
  ```

## امنیت کانتینرها

- اجرای کانتینر بدون دسترسی روت:
  ```bash
  docker run --user 1001 myapp
  ```
- استفاده از حالت Rootless برای اجرای امن‌تر کانتینرها.

## نظارت و عیب‌یابی کانتینرها

- مشاهده لاگ‌های کانتینر:
  ```bash
  docker logs container_id
  ```
- مانیتورینگ مصرف منابع:
  ```bash
  docker stats
  ```
- بررسی وضعیت سلامت کانتینر:
  ```dockerfile
  HEALTHCHECK --interval=30s CMD curl -f http://localhost/ || exit 1
  ```

## ابزارهای مرتبط

- **Docker Compose:** برای مدیریت چندین کانتینر با تنظیمات YAML.
- **Kubernetes:** برای مقیاس‌بندی و هماهنگ‌سازی کانتینرها در محیط‌های بزرگ.
- **Prometheus و Grafana:** برای جمع‌آوری و نمایش داده‌های نظارتی.

---

این مستند می‌تواند به عنوان نقطه شروع برای یادگیری و استفاده از Docker در پروژه‌های شما استفاده شود. برای جزئیات بیشتر به [مستندات رسمی Docker](https://docs.docker.com/) مراجعه کنید.
